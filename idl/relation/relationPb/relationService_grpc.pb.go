// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc3
// source: relationService.proto

package relationPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelationService_ActionRelation_FullMethodName       = "/relationService.RelationService/ActionRelation"
	RelationService_ListFollowRelation_FullMethodName   = "/relationService.RelationService/ListFollowRelation"
	RelationService_ListFollowerRelation_FullMethodName = "/relationService.RelationService/ListFollowerRelation"
	RelationService_ListFriendRelation_FullMethodName   = "/relationService.RelationService/ListFriendRelation"
)

// RelationServiceClient is the client API for RelationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelationServiceClient interface {
	ActionRelation(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error)
	ListFollowRelation(ctx context.Context, in *RelationFollowRequest, opts ...grpc.CallOption) (*RelationFollowResponse, error)
	ListFollowerRelation(ctx context.Context, in *RelationFollowerRequest, opts ...grpc.CallOption) (*RelationFollowerResponse, error)
	ListFriendRelation(ctx context.Context, in *RelationFriendRequest, opts ...grpc.CallOption) (*RelationFriendResponse, error)
}

type relationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelationServiceClient(cc grpc.ClientConnInterface) RelationServiceClient {
	return &relationServiceClient{cc}
}

func (c *relationServiceClient) ActionRelation(ctx context.Context, in *RelationActionRequest, opts ...grpc.CallOption) (*RelationActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationActionResponse)
	err := c.cc.Invoke(ctx, RelationService_ActionRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) ListFollowRelation(ctx context.Context, in *RelationFollowRequest, opts ...grpc.CallOption) (*RelationFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationFollowResponse)
	err := c.cc.Invoke(ctx, RelationService_ListFollowRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) ListFollowerRelation(ctx context.Context, in *RelationFollowerRequest, opts ...grpc.CallOption) (*RelationFollowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationFollowerResponse)
	err := c.cc.Invoke(ctx, RelationService_ListFollowerRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationServiceClient) ListFriendRelation(ctx context.Context, in *RelationFriendRequest, opts ...grpc.CallOption) (*RelationFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelationFriendResponse)
	err := c.cc.Invoke(ctx, RelationService_ListFriendRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServiceServer is the server API for RelationService service.
// All implementations must embed UnimplementedRelationServiceServer
// for forward compatibility.
type RelationServiceServer interface {
	ActionRelation(context.Context, *RelationActionRequest) (*RelationActionResponse, error)
	ListFollowRelation(context.Context, *RelationFollowRequest) (*RelationFollowResponse, error)
	ListFollowerRelation(context.Context, *RelationFollowerRequest) (*RelationFollowerResponse, error)
	ListFriendRelation(context.Context, *RelationFriendRequest) (*RelationFriendResponse, error)
	mustEmbedUnimplementedRelationServiceServer()
}

// UnimplementedRelationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelationServiceServer struct{}

func (UnimplementedRelationServiceServer) ActionRelation(context.Context, *RelationActionRequest) (*RelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionRelation not implemented")
}
func (UnimplementedRelationServiceServer) ListFollowRelation(context.Context, *RelationFollowRequest) (*RelationFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowRelation not implemented")
}
func (UnimplementedRelationServiceServer) ListFollowerRelation(context.Context, *RelationFollowerRequest) (*RelationFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFollowerRelation not implemented")
}
func (UnimplementedRelationServiceServer) ListFriendRelation(context.Context, *RelationFriendRequest) (*RelationFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriendRelation not implemented")
}
func (UnimplementedRelationServiceServer) mustEmbedUnimplementedRelationServiceServer() {}
func (UnimplementedRelationServiceServer) testEmbeddedByValue()                         {}

// UnsafeRelationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelationServiceServer will
// result in compilation errors.
type UnsafeRelationServiceServer interface {
	mustEmbedUnimplementedRelationServiceServer()
}

func RegisterRelationServiceServer(s grpc.ServiceRegistrar, srv RelationServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelationService_ServiceDesc, srv)
}

func _RelationService_ActionRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ActionRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_ActionRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ActionRelation(ctx, req.(*RelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_ListFollowRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ListFollowRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_ListFollowRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ListFollowRelation(ctx, req.(*RelationFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_ListFollowerRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ListFollowerRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_ListFollowerRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ListFollowerRelation(ctx, req.(*RelationFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelationService_ListFriendRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServiceServer).ListFriendRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelationService_ListFriendRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServiceServer).ListFriendRelation(ctx, req.(*RelationFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelationService_ServiceDesc is the grpc.ServiceDesc for RelationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relationService.RelationService",
	HandlerType: (*RelationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActionRelation",
			Handler:    _RelationService_ActionRelation_Handler,
		},
		{
			MethodName: "ListFollowRelation",
			Handler:    _RelationService_ListFollowRelation_Handler,
		},
		{
			MethodName: "ListFollowerRelation",
			Handler:    _RelationService_ListFollowerRelation_Handler,
		},
		{
			MethodName: "ListFriendRelation",
			Handler:    _RelationService_ListFriendRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relationService.proto",
}
